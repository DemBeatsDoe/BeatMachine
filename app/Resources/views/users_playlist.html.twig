{% extends 'page.html.twig' %}

{% block title %}Beat Machine - {{ playlistName }}{% endblock %}

{% block stylesheets %}
    <style>
        body {
            background: #eeeeee;
        }

        .playlistHeader {
            height: 130px;
            position: relative;
            margin-bottom: 20px;
        }

        .playlistArt {
            height: 150px;
            width: 150px;
            object-fit: cover;
            position: relative;
            float: left;
        }

        .playlistTitle {
            position: relative;
            left: 10px;
            padding: 5px;

            font-family: 'Lato', sans-serif;
            font-size: 20pt;
            font-weight: 900;
            color: #2f364a;
        }

        .playlistAuthor {
            position: relative;
            left: 10px;
            margin-top: 2px;
            margin-bottom: 20px;

            font-family: 'Lato', sans-serif;
            font-size: 13pt;
            color: #8f8f92;
        }

        .playlistAuthor a:hover {
            color: #010101;
            transition: ease-in-out 0.1s;
        }

        .playlistAuthor a {
            font-family: 'Lato', sans-serif;
            font-size: 13pt;
            color: #8f8f92;

            outline: none;
            text-decoration: none;
        }

        .songsTable {
            width: 100%;
            font-family: 'Lato', sans-serif;
            color: #57575a;
            border-collapse: collapse;
            margin-bottom: 10px;
            margin-top: 50px;
        }

        .songsTable tr {
            border-bottom: 1px solid black;
            border-color: #b4b4b7;
        }

        .songsTable th {
            text-align: left;
            padding-bottom: 6px;
        }

        .songsTable td {
            padding-top: 9px;
            padding-bottom: 9px;

        }

        .collaboratorDP {
            width: 50px;
            height: 50px;
        }

        .collaboratorDP:hover {
            background-color: black;
            opacity: 0.5;
        }

        #collaboratorList li {
            display: inline;
        }

        .songsTable tbody tr:hover {
            background-color: #eeeeee;
        }

        .songsTable .playing {
            font-weight: bold;
            color: #2f364a;
        }

        .songDeleteButton {
            font-size: 20px;
            cursor:pointer;
            margin-right: 5px;
        }
        .songDeleteButton:hover {
            color: #DD0000;
            transition: ease-in-out 0.1s;
        }
        .label-info {
            background-color: #efeeed;
        }
        .collaboratorDP {
            float: right;
        }

        .buttonList {
            position: relative;
            left: 10px;
        }

        .buttonList li {
            display: inline;
            background-color: transparent;
        }
    </style>
{% endblock %}

{% block javascripts %}
    <script type="text/javascript">
        var lastClicked = false;

        //Set this pages playlist
        playBar.emptyPlaylist();
        {% for song in songs %}
        playBar.addSongToPlaylist('{{ song.name }}', '{{ song.artist }}', '{{ song.musicLink }}', '{{ song.artLink }}');
        {% endfor %}

        //Lest listener for song change
        document.addEventListener("newSongLoaded", function () {
            setActiveSong($('#' + playBar.getCurrentTrackIndex()));
        });

        function setActiveSong(clickedElement) {
            if (lastClicked != false) {
                lastClicked.removeClass();
            }
            clickedElement.removeClass().addClass('playing');
            lastClicked = clickedElement;
        }

        function changeTitle(playlistid, title) {
            xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/changetitle", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + playlistid + '&name=' + title);
        }

        function changeSongName(playlistid, songid, name) {
            xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/changesongname", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + playlistid + '&songID=' + songid + '&name=' + name);
        }

        function changeSongArtist(playlistid, songid, name) {
            xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/changesongartist", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + playlistid + '&songID=' + songid + '&name=' + name);
        }

        function togglePrivate() {
            xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/togglePrivate", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + {{ playlistID }});
            //Process the returned data
            xxhttp.onreadystatechange = function () {
                if (xxhttp.readyState == 4 && xxhttp.status == 200) {
                    var response = JSON.parse(xxhttp.responseText);
                    if (response.success) location.reload();
                }
            }
        }

        /* EXAMPLE RESPONSE FROM SOUNDCLOUD
         {
         "version": 1.0,
         "type": "rich",
         "provider_name": "SoundCloud",
         "provider_url": "http://soundcloud.com",
         "height": 400,
         "width": "100%",
         "title": "1.5- XO TOUR Llif3 (Produced By TM88) by LIL UZI VERT",
         "description": "LUV IS RAGE 2 COMING SOON",
         "thumbnail_url": "http://i1.sndcdn.com/artworks-000209741436-qfq484-t500x500.jpg",
         "html": "\u003Ciframe width=\"100%\" height=\"400\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?visual=true\u0026url=https%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F309689093\u0026show_artwork=true\"\u003E\u003C/iframe\u003E",
         "author_name": "LIL UZI VERT",
         "author_url": "https://soundcloud.com/liluzivert"
         }
         */

        function addSong(url) {

            //Check if the link refers to a youtube link
            if(extractHostname(url)=="www.youtube.com"){

                //Extract ID
                var processedURL = getParameterByName("v", url);

                //Get metadata
                jQuery.getJSON("https://www.googleapis.com/youtube/v3/videos", {
                    part: "snippet,contentDetails",
                    id: processedURL,
                    key: "AIzaSyC0er3oYG7krLhtMVWJA1hedi1ezx_Ecwk"
                }, function(data) {

                    if(!(data.items.length === 0)){
                        var art = data.items[0].snippet.thumbnails.medium.url;
                        var title = data.items[0].snippet.title;
                        var author = data.items[0].snippet.channelTitle;
                        var duration = data.items[0].contentDetails.duration;
                        var durationConverted = convertToMinSec(duration);
                        var durationSec = durationConverted.seconds;
                        if(durationSec.length == 1){durationSec = "0"+durationSec;}
                        var durationString = durationConverted.minutes+":"+durationSec;

                        sendNewSongToDB(title,  author , "YT:"+processedURL, art, durationString);
                    }
                    else{
                        //Failed to parse link
                        document.getElementById('songURL').value = "";
                        document.getElementById('songURL').placeholder = "Couldn't parse link";
                    }

                });
            }

            //Check if the link refers to a soundcloud link
            else if(extractHostname(url)=="soundcloud.com"){
                var xhttp = new XMLHttpRequest();
                xhttp.open("GET", "https://soundcloud.com/oembed?format=json&url="+url, true);
                xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                xhttp.send();

                //Process the returned data
                xhttp.onreadystatechange = function () {
                    if (xhttp.readyState == 4 && xhttp.status == 200) {
                        var playlistResponse = JSON.parse(xhttp.responseText);
                        var processedURL = playlistResponse.html.substr(playlistResponse.html.indexOf('tracks%2F')+9, 9); //ID is 9 long
                        sendNewSongToDB(playlistResponse.title , playlistResponse.author_name , processedURL, playlistResponse.thumbnail_url );
                    } else {
                        //Failed to parse link
                        document.getElementById('songURL').value = "";
                        document.getElementById('songURL').placeholder = "Couldn't parse link";
                    }
                }
            }

            //Failed to parse link
            else{
                document.getElementById('songURL').value = "";
                document.getElementById('songURL').placeholder = "Couldn't parse link";
            }

        }

        function convertToMinSec(input){
            var reptms = /^PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?$/;
            var hours = 0, minutes = 0, seconds = 0, totalseconds;

            if (reptms.test(input)) {
                var matches = reptms.exec(input);
                if (matches[1]) hours = matches[1];
                if (matches[2]) minutes = matches[2];
                if (matches[3]) seconds = matches[3];
                totalseconds = hours * 3600  + minutes * 60 + seconds;
            }

            return{minutes:minutes, seconds:seconds};
        }

        function extractHostname(url) {
            var hostname;
            //find & remove protocol (http, ftp, etc.) and get the hostname
            if (url.indexOf("://") > -1) {
                hostname = url.split('/')[2];
            }
            else {
                hostname = url.split('/')[0];
            }

            //find & remove port number
            hostname = hostname.split(':')[0];

            return hostname;
        }

        function getParameterByName(name, url) {
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }

        function sendNewSongToDB(songTitle, songAuthor, url, artwork, duration){
            if(!duration){
                duration = "3:" + Math.floor(Math.random()*50 + 10);
            }

            var xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/addSong", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID={{ playlistID }}'+'&title=' + songTitle + '&artist=' + songAuthor + '&url=' + url + '&art=' + artwork + '&length=' + duration);
            xxhttp.onreadystatechange = function () {
                if (xxhttp.readyState == 4 && xxhttp.status == 200) {
                    var r = JSON.parse(xxhttp.responseText);
                    if (r.success) {
                        //Succeeded
                        //appendSong(r.id, r.title, r.artist, r.length);
                        location.reload();
                    } else {
                        document.getElementById('songURL').value = "";
                        document.getElementById('songURL').placeholder = r.error;
                    }
                }
            }
        }

        $('#addSongButton').click(function() {
            addSong($('#songURL').val());
        });

        $('#songURL').keypress(function (e) {
            if (e.which == 13) {
                //Disable textbox to prevent multiple submit
                //$(this).attr("disabled", "disabled");

                addSong($('#songURL').val());
                return false;
            }
        });

        $(document).ready(function () {
            $(".blur").css("width", $(".clickMe").width());
            $(".blur").css("height", $(".clickMe").height());
        });

        $('#deleteButton').click(function () {
            var xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/delete", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + {{ playlistID }});
            window.location.replace("/");
        });

        $('.clickMe').click(function () {
            "use strict";
            $(this).hide();
            $('#' + $(this).attr('for'))
                .val($(this).text())
                .toggleClass("form-control")
                .show()
                .focus()
                .width('70%');
            $('#textBox1').width(250);
        });

        $('.blur').blur(function () {
            "use strict";
            $(this)
                .hide()
                .toggleClass("form-control");
            var myid = (this).id;
            $('span[for=' + myid + ']')
                .text($(this).val())
                .show();
            //Update db
            if ($(this).hasClass("playlistTitle")) {
                changeTitle({{ playlistID }}, $(this).val())
            } else if ($(this).hasClass("songName")) {
                changeSongName({{ playlistID }}, myid[myid.length - 1], $(this).val())  //TODO: This will only work for index 0-9 :(
            } else if ($(this).hasClass("songArtist")) {
                changeSongArtist({{ playlistID }}, myid[myid.length - 1], $(this).val())
            }
        });

        function deleteSong(id, element) {
            var xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/removeSong", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + {{ playlistID }} + '&songID=' + id);
            //Process the returned data
            xxhttp.onreadystatechange = function () {
                if (xxhttp.readyState == 4 && xxhttp.status == 200) {
                    var response = JSON.parse(xxhttp.responseText);
                    if (response.success) {
                        element.parentNode.parentNode.parentNode.removeChild(element.parentNode.parentNode);
                    }
                }
            }
        }

        function getShareLink() {
            var xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/share/getLink", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + {{ playlistID }});

            //Process the returned data
            xxhttp.onreadystatechange = function () {
                if (xxhttp.readyState == 4 && xxhttp.status == 200) {
                    var response = JSON.parse(xxhttp.responseText);
                    if (response.success) {
                        copyToClipboard(response.link);
                    }
                }
            }
        }

        function copyToClipboard(text) {
            window.prompt("Copy to clipboard: Ctrl+C, Enter", text);
        }


        function removeCollaborator(id, element) {
            var xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/edit/removeCollaborator", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + {{ playlistID }} + '&collaboratorID=' + id);

            //Process the returned data
            xxhttp.onreadystatechange = function () {
                if (xxhttp.readyState == 4 && xxhttp.status == 200) {
                    var response = JSON.parse(xxhttp.responseText);
                    if (response.success) { //Remove was successful
                        element.parentNode.parentNode.parentNode.removeChild(element.parentNode.parentNode);
                    }
                }
            }
        }

        function addCollaborator(input) {
            var xxhttp = new XMLHttpRequest();
            xxhttp.open("POST", "/playlist/edit/addCollaborator", true);
            xxhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xxhttp.send('playlistID=' + {{ playlistID }} + '&input=' + input);

            //Process the returned data
            xxhttp.onreadystatechange = function () {
                if (xxhttp.readyState == 4 && xxhttp.status == 200) {
                    var response = JSON.parse(xxhttp.responseText);
                    if (response.success) { //Add was successful
                        //Add new user to list
                        appendCollaborator(response.username, response.userID, response.userDP);
                    }
                }
            }
        }

        function appendCollaborator(username, userID, userDP) {
            var li = document.createElement('li');

            li.innerHTML = '<a href="/profile?id=' + userID + '"><img class="collaboratorDP" src="' + userDP + '" title="'+ username +'"></a>';

            document.getElementById('collaboratorList').appendChild(li);
        }

        $()

        $('#collabButton').click(function () {
            addCollaborator($('#collabName').val());
        });

        $('#collabName').keypress(function (e) { //On enter
            if (e.which == 13) {
                addCollaborator($('#collabName').val());
                return false;
            }
        });
        </script>
{% endblock %}

{% block pagebody %}
    <div class="playlistHeader">
        <img class="playlistArt" src="{% if songs is empty %} {{ playlistArt }} {% else %} {{songs[0].artLink}} {% endif %}">

        <span class="collaborators pull-right">
            <h4 style="text-align: right;">Collaborators</h4>
            <ul id="collaboratorList">
                {% for c in collaborators %}
                    {% set a = loop.index0 %}
                    <li>
                        <a href="/profile?id={{ c.id }}">
                            <img class="collaboratorDP" src="{{ collaboratorsDP[a] }}" title="{{ c.username|title }}">
                        </a>
                    </li>
                {% endfor %}
            </ul>

            {% if editMode %}
                <div style="margin-top: 10px; width: 200px;" class="input-group">
                    <span id="collabButton" class=" btn input-group-addon"><i class="glyphicon glyphicon-plus"></i></span>
                    <div style='display:block; float:left; width:100%; margin-right:8px;'>
                        <input id="collabName" type="url" class="form-control" name="songURL" placeholder="Username / Email">
                    </div>
                </div>
            {% endif %}
        </span>

        <span>
            {% if editMode %}
                <h3><span class="label label-info clickMe playlistTitle" for="textBox1">{{ playlistName }}</span></h3>
                <input value="" type="text" id="textBox1" name="textBox1" class="blur playlistTitle" hidden>
                {% else %}
                <div class="playlistTitle">{{ playlistName }}</div>
            {% endif %}
        </span>



        <div class="playlistAuthor"><a href="/profile?id={{ authorID }}">Created by {{ playlistAuthor }}</a></div>

        <ul class="buttonList">
            {% if canUserEdit %}
                {% if editMode %}
                    <span id="editbutton">
                        <li>
                            <a href="/playlist?id={{ playlistID }}">
                                <button title="Finish editing" type="button" class="btn btn-default btn-info btn-md glyphicon glyphicon-ok"></button>
                            </a>
                        </li>
                    </span>
                {% else %}
                    <span id="editbutton">
                        <li>
                            <a href="/playlist/edit?id={{ playlistID }}">
                                <button title="Edit"  type="button" class="btn btn-default btn-info btn-md glyphicon glyphicon-edit"></button>
                            </a>
                        </li>
                    </span>
                {% endif %}
            {% endif %}

            <span id="linkButton">
                <li>
                    <button title="Get share link" onclick="getShareLink();" type="button" class="btn btn-default btn-warning btn-md glyphicon glyphicon-link"></button>
                </li>
            </span>
        </ul>
    </div>

    <table class="songsTable">

        <thead>
        <tr>
            <th>Length</th>
            <th>Song Name</th>
            <th>Artist</th>
            {% if editMode %} <th></th> {% endif %}
        </tr>
        </thead>

        <tbody>
        {% for song in songs %}
            {% set a = loop.index0 %}
            <div>
                <tr id="{{ a }}" {% if not editMode %}onclick="playBar.playSongAt({{ a }});" style="cursor: pointer;"{% endif %}>
                    <td>{{ song.length }}</td>
                    <td>
                        {% if editMode %}
                            <span class="clickMe label label-info songName" style="color: #030303; font-size: 14px; font-weight: 100;"
                                  for="songNameTextbox{{ a }}">{{ song.name }}</span>
                            <input value="" type="text" id="songNameTextbox{{ a }}" name="songNameTextbox{{ a }}"
                                   class="blur songName" hidden>
                        {% else %}
                            <span id="playingIcon{{ a }}" class="playingIcon glyphicon glyphicon-volume-up" style="margin-right: 10px; display: none;"></span>{{ song.name }}
                        {% endif %}
                    </td>
                    <td>
                        {% if editMode %}
                            <span class="clickMe label label-info songArtist" style="color: #030303; font-size: 14px; font-weight: 100;"
                                  for="songArtistTextbox{{ a }}">{{ song.artist }}</span>
                            <input value="" type="text" id="songArtistTextbox{{ a }}" name="songArtistTextbox{{ a }}"
                                   class="blur songArtist" hidden>
                        {% else %}
                            {{ song.artist }}
                        {% endif %}

                    </td>
                    {% if editMode %}
                        <td>
                            <span class="glyphicon glyphicon-remove-circle songDeleteButton" onclick="deleteSong({{ song.id }}, this);"></span>
                        </td>
                    {% endif %}
                </tr>
            </div>
        {% endfor %}

        </tbody>

    </table>

    {% if canUserEdit %}
        <div style="margin-bottom: 10px;" class="input-group">
            <span id="addSongButton" class="btn input-group-addon"><i class="glyphicon glyphicon-plus"></i></span>
            <div shorterbox style='display:block; float:left; width:100%; margin-right:8px;'>
                <input id="songURL" type="url" class="form-control" name="songURL" placeholder="SoundCloud / YouTube URL">
            </div>
        </div>
    {% endif %}


    {% if editMode and is_granted("IS_AUTHENTICATED_REMEMBERED") and app.user.id == authorID %}
        <div class="deletePlaylistButton" style="text-align: center; padding-top: 100px;">
            <button title="Delete playlist" id="deleteButton" class="btn btn-danger glyphicon glyphicon-trash"></button>
            {% if public %}
                <button title="Make private" id="makePrivateButton" class="btn btn-warning glyphicon glyphicon-eye-close" onclick="togglePrivate();"></button>
            {% else %}
                <button title="Make public" id="makePublicButton" class="btn btn-info glyphicon glyphicon-eye-open" onclick="togglePrivate();"></button>
            {% endif %}
        </div>

    {% endif %}
{% endblock %}